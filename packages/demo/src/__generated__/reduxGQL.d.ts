/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface ReduxGQLQuery {
  redux?: ReduxGQLRedux;
}

export interface ReduxGQLRedux {
  name?: string;
  nested?: ReduxGQLNested;
}

export interface ReduxGQLNested {
  flag?: boolean;
  place?: ReduxGQLPlace;
}

export interface ReduxGQLPlace {
  kind?: string;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface ReduxGQLResolver {
  Query?: ReduxGQLQueryTypeResolver;
  Redux?: ReduxGQLReduxTypeResolver;
  Nested?: ReduxGQLNestedTypeResolver;
  Place?: ReduxGQLPlaceTypeResolver;
}
export interface ReduxGQLQueryTypeResolver<TParent = any> {
  redux?: QueryToReduxResolver<TParent>;
}

export interface QueryToReduxResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReduxGQLReduxTypeResolver<TParent = any> {
  name?: ReduxToNameResolver<TParent>;
  nested?: ReduxToNestedResolver<TParent>;
}

export interface ReduxToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReduxToNestedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReduxGQLNestedTypeResolver<TParent = any> {
  flag?: NestedToFlagResolver<TParent>;
  place?: NestedToPlaceResolver<TParent>;
}

export interface NestedToFlagResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NestedToPlaceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ReduxGQLPlaceTypeResolver<TParent = any> {
  kind?: PlaceToKindResolver<TParent>;
}

export interface PlaceToKindResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
